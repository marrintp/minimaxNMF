%   File: minmaxNMF_ScenarioSpecification.m
%   Copyright (c) <2019> <University of Mons>
%   COLORAMAP Group, Univ. of Mons, Belgium
%   https://sites.google.com/site/nicolasgillis/projects/overview
%
%   Permission is hereby granted, free of charge, to any person
%   obtaining a copy of this software and associated documentation
%   files (the "Software"), to deal in the Software without restriction,
%   including without limitation the rights to use, copy, modify and
%   merge the Software, subject to the following conditions:
%
%   1.) The Software is used for non-commercial research and
%       education purposes.
%
%   2.) The above copyright notice and this permission notice shall be
%       included in all copies or substantial portions of the Software.
%
%   3.) Publication, Distribution, Sublicensing, and/or Selling of
%       copies or parts of the Software requires special agreements
%       with the University of Mons and is in general not permitted.
%
%   4.) Modifications or contributions to the software must be
%       published under this license. The University of Mons
%       is granted the non-exclusive right to publish modifications
%       or contributions in future versions of the Software free of charge.
% 
%   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
%   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
%   OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
%   NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
%   HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
%   WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
%   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
%   OTHER DEALINGS IN THE SOFTWARE.
%
%   Persons using the Software are encouraged to notify the 
%   COLORAMAP Group, Univ. of Mons, Belgium about bugs. Please reference 
%   the Software in your publications if it was used for them.
% ------------------------------------------------------------------------
% SYNTAX:
% [ param, mvOptions, mmOptions ] =  minimaxNMF_ScenarioSpecification( scenario );
%
% ------------------------------------------------------------------------
% OVERVIEW:
% This function sets the parameters to reproduce the various experiments in
% the paper.
%
% ------------------------------------------------------------------------
% INPUTS:
% scenario  String that specificies the scenario to reproduce.
%           'custom'/'Fig.1'/'Fig.2_Exp.IVa'/'Fig.2_Exp.IVb'/'Fig.3'
%
% ------------------------------------------------------------------------
% OUTPUTS: 
% param     MATLAB structure that contains the parameters for data
%           generation.
%
%   Fields:
%   'scenario'      string - specificies the scenario used                      
%   'nTotalEMs'     scalar - # of endmembers. total needs to be equal to 
%                   (nDominantEMs + nRareEMs)
%   'nBands'        scalar - # of dimensions/spectral bands 
%   'nSamples'      scalar - # samples/pixels to generate. total needs to
%                   be equal to (nRows x nColumns)
%   'nRows'         scalar - # of rows in the "image"
%   'nColumns'      scalar - # of columns in the "image"
%   'patch_height'  scalar - # of rows in a "patch" (needs to be a divisor
%                   of nRows)
%   'patch_width'   scalar - # of columns in a "patch" (needs to be a 
%                   divisor of nColumns)                         
%   'W'             nTotalEMs x nBands matrix - groundtruth endmembers
%   'rarePercent'   scalar - percent of pixels containing nonzero Dirichlet 
%                   parameter for the rare endmembers
%   'nDominantEMs'  scalar - # of dominant endmembers, always have nonzero
%                   Dirichlet parameters
%   'nRareEMs'      scalar - # of rare endmembers, have nonzero Dirichlet 
%                   parameter in (nSamples x rarePercent) samples
%   'maxEMsPerPix'  scalar - pixel sparsity
%   'alpha'         nTotalEMs x 1 vector - parameter of the Dirichlet 
%                   distribution
%   'maxPurity'     scalar - maximum abundance of a single endmember in any
%                   sample/pixel
%   'sigmaN'        scalar - noise variance
%   'printout'      string - determines amount of info printed to the 
%                   screen during experiments ['verbose'/'terse'/'none']
%
%   Addtional Fields for scenarios 'custom'/'Fig.2_Exp.IVb'/'Fig.3':
%   'usedEMs'       1 x nTotalEMs vector - indices of library spectra   
%   'EM_names'      nTotalEMs x 29 character array - names of used spectra    
%
%
% mmOptions MATLAB structure that contains the parameters for minimax
%           minimum volume NMF method proposed by [1]
%
%   Fields:
%   'beta'          scalar - volume penalty parameter. It is the same 
%                   as 'mvOptions.lambda'
%   'delta'         scalar - eigenvalue weight
%   'maxiter'       scalar - maximum number of outer iterations, i.e.,
%                   maximum number of subgradient steps
%   'inneriter'     scalar - maximum number of inneriterations, i.e.,
%                   number of iterations of the fast projected gradient 
%                   algorithm each time it is called
%   'display'       boolean - flag that displays or hides progress of fast
%                   projected gradient method
%
%
% mvOptions MATLAB structure that contains the parameters for the minimum
%           volume NMF method of [3]
%
%   Fields:
%   'lambda'        scalar - volume penalty parameter. It is the same as
%                   'mmOptions.beta'
%   'delta'         scalar - eigenvalue weight
%   'maxiter'       scalar - maximum number of outer iterations, i.e.,
%                   number of times the fast gradient algorithm is called
%                   on W and H
%   'inneriter'     scalar - maximum number of inneriterations, i.e.,
%                   number of iterations of the fast projected gradient 
%                   algorithm each time it is called
%   'display'       boolean - flag that displays or hides progress of fast
%                   projected gradient method
% ------------------------------------------------------------------------
% DEPENDENCIES:
% n/a
%
% ------------------------------------------------------------------------
% CITATION:
% If you find this code useful in your research, please cite
%
% [1]   Marrinan, Timothy and Nicolas Gillis. 
%       "Hyperspectral Unmixing with Rare Endmembers via Minimax
%       Nonnegative Matrix Factorization." In 28th European Signal 
%       Processing Conference (EUSIPCO) , pp. 69-78. IEEE, 2020.
%
% ------------------------------------------------------------------------
% REFERENCES:
% [1]   Marrinan, Timothy and Nicolas Gillis. 
%       "Hyperspectral Unmixing with Rare Endmembers via Minimax
%       Nonnegative Matrix Factorization." In 28th European Signal 
%       Processing Conference (EUSIPCO) , pp. 69-78. IEEE, 2020.
%
% [2]   Clark, Roger N., Gregg A. Swayze, A. Gallagher, T. V. V. King, 
%       and W. M. Calvin. "The us geological survey digital spectral 
%       library." US Geological Survey Open File Report (1993): 93-592.
%
% [3]    Leplat, Valentin, Andersen MS Ang, and Nicolas Gillis. 
%       "Minimum-volume rank-deficient nonnegative matrix factorizations." 
%       In ICASSP 2019-2019 IEEE International Conference on Acoustics, 
%       Speech and Signal Processing (ICASSP), pp. 3402-3406. IEEE, 2019.
%
% ------------------------------------------------------------------------
% CREATED:      21/07/2020 by Tim Marrinan
%
% LAST EDITED:  28/07/2020 by Tim Marrinan
%
% NOTES: 
% -------------------------------------------------------------------------
function [ param, mmOptions, mvOptions ] =  minimaxNMF_ScenarioSpecification( scenario )

%% Scenario specification
switch lower(scenario)
    % -------------------------------------------------------------------------
    case 'custom' % Modify the parameters here to run your own experiments
        % Load the USGS hyperspectral library [2] and select endmembers
        usgs                = load('USGS_Library.mat','datalib','names');
        names               = usgs.names;
        library             = usgs.datalib;
        totb                = size(library,1);   % 224 available bands
        totEMs              = size(library,2);   % 501 available endmembers
        
        % Remove water absorbtion bands and noisy bands
        bad_channels        = [];%[1,2,104:113,148:167,221:224];
        usedb               = 1 : totb;
        usedb(bad_channels) = 0;
        usedb               = usedb > 0;
        library             = library(usedb,:);
        
        % You can use any subset of endmembers, but the following set is
        % used in the paper.  The problem is harder when the magnitude of
        % the different endmembers varies greatly.  Here the magnitudes
        % range from ~25 to ~150:
        %grab                = [328, 21, 420, 459, 334, 365, 358, 203, 321, 83];
        grab                = [328, 21, 420];
        % Here is another good set:
        % grab              = [347, 20, 143, 25, 47, 403, 339, 163, 461, 498];
        % Or alternatively you can use:
        % grab              = randperm(totEMs,10);
        
        % Data generation paramters
        param   = struct(   'scenario',scenario,...
                            'nTotalEMs', size(grab,2),...
                            'nBands', sum(usedb),...
                            'nSamples', 2500,...
                            'nRows', 50,...
                            'nColumns', 50,...
                            'patch_height', 10,... % required: mod(nRows,patch_height) = 0 - or else write your own code to cut the data into patches and put it back together
                            'patch_width', 10,...  % required: mod(nColumns,patch_width) = 0 - or else write your own code to cut the data into patches and put it back together
                            'W', library(:,grab),...
                            'rarePercent', .10,...
                            'nDominantEMs', 3,...
                            'nRareEMs', 0,...
                            'maxEMsPerPix', 3,...
                            'alpha', 0.05*ones(size(grab,2),1),...
                            'maxPurity',0.8,... % ~min distance between the columns of W and the data points
                            'sigmaN', 0,... %0.001,...
                            'printout','verbose',...
                            'usedEMs', grab,... 
                            'EM_names', char(names(grab,:)),...
                            'usedBands', usedb);
        mmOptions = struct( 'beta', 0.001,...
                            'delta', 0.1,...
                            'maxiter', 40,...
                            'inneriter', 25,...
                            'display', 0);                          
        mvOptions = struct( 'lambda', 0.01,...
                            'delta', 0.1,...
                            'maxiter', 1000,...
                            'display', 0);    
    % -------------------------------------------------------------------------
    case 'fig.1'
        % Data generation paramters
        param   = struct(   'scenario',scenario,...
                            'nTotalEMs', 4,...
                            'nBands', 4,...
                            'nSamples', 2500,...
                            'nRows', 50,...
                            'nColumns', 50,...
                            'patch_height', 10,...
                            'patch_width', 10,...
                            'W', [1 1 0 0; 0 0 1 1; 0 1 1 0; 1 0 0 1],...
                            'rarePercent', .01,...
                            'nDominantEMs', 3,...
                            'nRareEMs', 1,...
                            'maxEMsPerPix', 3,...
                            'alpha', 0.01*ones(4,1),...
                            'maxPurity',0.8,...
                            'sigmaN', 0.001,...
                            'printout','verbose');
        mmOptions = struct( 'beta', 0.001,...
                            'delta', 0.1,...
                            'maxiter', 40,...
                            'inneriter', 25,...
                            'display', 0);                          
        mvOptions = struct( 'lambda', 0.01,...
                            'delta', 0.1,...
                            'maxiter', 1000,...
                            'display', 0);           
    % -------------------------------------------------------------------------
    case 'fig.2_exp.iva'
        % Data generation paramters
        param   = struct(   'scenario',scenario,...
                            'nTotalEMs', 4,...
                            'nBands', 4,...
                            'nSamples', 2500,...
                            'nRows', 50,...
                            'nColumns', 50,...
                            'patch_height', 10,...
                            'patch_width', 10,...
                            'W', [1 1 0 0; 0 0 1 1; 0 1 1 0; 1 0 0 1],...
                            'rarePercent', .01,...
                            'nDominantEMs', 3,...
                            'nRareEMs', 1,...
                            'maxEMsPerPix', 3,...
                            'alpha', 0.01*ones(4,1),...
                            'maxPurity',0.8,...
                            'sigmaN', 0.001,... %[ 1, .8, .6, .4, .2, .1, 0.08, 0.06 0.04,0.02, 0.01, 0.008, 0.006, 0.004,0.002, 0.001 ] );
                            'printout','verbose');
        mmOptions = struct( 'beta', 0.001,...
                            'delta', 0.1,...
                            'maxiter', 40,...
                            'inneriter', 25,...
                            'display', 0);                          
        mvOptions = struct( 'lambda', 0.01,...
                            'delta', 0.1,...
                            'maxiter', 1000,...
                            'display', 0);     
    % -------------------------------------------------------------------------
    case 'fig.2_exp.ivb'
        % Load the USGS hyperspectral library [2] and select endmembers
        usgs                = load('USGS_Library.mat','datalib','names');
        names               = usgs.names;
        library             = usgs.datalib;
        totb                = size(library,1);   % 224 available bands
        totEMs              = size(library,2);   % 501 available endmembers
        
        % Remove water absorbtion bands and noisy bands
        bad_channels        = [1,2,104:113,148:167,221:224];
        usedb               = 1 : totb;
        usedb(bad_channels) = 0;
        usedb               = usedb > 0;
        library             = library(usedb,:);
        
        % Endmembers used in the paper (in order):
        grab                = [328, 21, 420, 459, 334, 365, 358, 203, 321, 83];
        
        % Data generation parameters
        param   = struct(   'scenario',scenario,...
                            'nTotalEMs', size(grab,2),...
                            'nBands', sum(usedb),...
                            'nSamples', 2500,...
                            'nRows', 50,...
                            'nColumns', 50,...
                            'patch_height', 10,...
                            'patch_width', 10,...
                            'W', library(:,grab),...
                            'rarePercent', .02,...
                            'nDominantEMs', 8,...
                            'nRareEMs', 2,...
                            'maxEMsPerPix', 3,...
                            'alpha', 0.05*ones(size(grab,2),1),...
                            'maxPurity',0.8,...
                            'sigmaN', 0.001,...
                            'printout','verbose',...
                            'usedEMs', grab,... 
                            'EM_names', char(names(grab,:)),...
                            'usedBands', usedb);
        mmOptions = struct( 'beta', 0.001,...
                            'delta', 0.1,...
                            'maxiter', 40,...
                            'inneriter', 25,...
                            'display', 0);                          
        mvOptions = struct( 'lambda', 0.01,...
                            'delta', 0.1,...
                            'maxiter', 1000,...
                            'display', 0);                            
    % -------------------------------------------------------------------------
    case 'fig.3'
        % Load the USGS hyperspectral library [2] and select endmembers
        usgs                = load('USGS_Library.mat','datalib','names');
        names               = usgs.names;
        library             = usgs.datalib;
        totb                = size(library,1);   % 224 available bands
        totEMs              = size(library,2);   % 501 available endmembers
        
        % Remove water absorbtion bands and noisy bands
        bad_channels        = [1,2,104:113,148:167,221:224];
        usedb               = 1 : totb;
        usedb(bad_channels) = 0;
        usedb               = usedb > 0;
        library             = library(usedb,:);
                           
        % Endmembers used in the paper (in order):
        grab                = [328, 21, 420, 459, 334, 365, 358, 203, 321, 83];
        
        % Data generation parameters
        param   = struct(   'scenario',scenario,...
                            'nTotalEMs', size(grab,2),...
                            'nBands', sum(usedb),...
                            'nSamples', 2500,...
                            'nRows', 50,...
                            'nColumns', 50,...
                            'patch_height', 10,...
                            'patch_width', 10,...
                            'W', library(:,grab),...
                            'rarePercent', .02,...
                            'nDominantEMs', 8,...
                            'nRareEMs', 2,...
                            'maxEMsPerPix', 3,...
                            'alpha', 0.05*ones(size(grab,2),1),...
                            'maxPurity',0.8,...
                            'sigmaN', 0.001,...
                            'printout','verbose',...
                            'usedEMs', grab,... 
                            'EM_names', char(names(grab,:)),...
                            'usedBands', usedb);
        mmOptions = struct( 'beta', 0.001,...
                            'delta', 0.1,...
                            'maxiter', 50,...
                            'inneriter', 10,...
                            'display', 0);                          
        mvOptions = struct( 'lambda', 0.01,...
                            'delta', 0.1,...
                            'maxiter', 500,...
                            'display', 0);                            
    otherwise
        error('Unknown scenario: Options are [ custom / fig.1 / fig.2_exp.iva / fig.2_exp.ivb / fig.3 ]');   
end

